/*
 * Watson Assistant v2
 *
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.  The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BaseMessageInputOptions : Optional properties that control how the assistant responds.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseMessageInputOptions {
    /// Whether to restart dialog processing at the root of the dialog, regardless of any previously visited nodes. **Note:** This does not affect `turn_count` or any other context variables.
    #[serde(rename = "restart", skip_serializing_if = "Option::is_none")]
    pub restart: Option<bool>,
    /// Whether to return more than one intent. Set to `true` to return all matching intents.
    #[serde(rename = "alternate_intents", skip_serializing_if = "Option::is_none")]
    pub alternate_intents: Option<bool>,
    #[serde(rename = "spelling", skip_serializing_if = "Option::is_none")]
    pub spelling: Option<Box<crate::models::MessageInputOptionsSpelling>>,
    #[serde(rename = "auto_learn", skip_serializing_if = "Option::is_none")]
    pub auto_learn: Option<Box<crate::models::MessageInputOptionsAutoLearn>>,
}

impl BaseMessageInputOptions {
    /// Optional properties that control how the assistant responds.
    pub fn new() -> BaseMessageInputOptions {
        BaseMessageInputOptions {
            restart: None,
            alternate_intents: None,
            spelling: None,
            auto_learn: None,
        }
    }
}


