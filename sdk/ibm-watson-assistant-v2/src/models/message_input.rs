/*
 * Watson Assistant v2
 *
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.  The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageInput {
    /// The type of user input. Currently, only text input is supported.
    #[serde(rename = "message_type", skip_serializing_if = "Option::is_none")]
    pub message_type: Option<MessageType>,
    /// The text of the user input. This string cannot contain carriage return, newline, or tab characters.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Intents to use when evaluating the user input. Include intents from the previous response to continue using those intents rather than trying to recognize intents in the new input.
    #[serde(rename = "intents", skip_serializing_if = "Option::is_none")]
    pub intents: Option<Vec<crate::models::RuntimeIntent>>,
    /// Entities to use when evaluating the message. Include entities from the previous response to continue using those entities rather than detecting entities in the new input.
    #[serde(rename = "entities", skip_serializing_if = "Option::is_none")]
    pub entities: Option<Vec<crate::models::RuntimeEntity>>,
    /// For internal use only.
    #[serde(rename = "suggestion_id", skip_serializing_if = "Option::is_none")]
    pub suggestion_id: Option<String>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Box<crate::models::MessageInputOptions>>,
}

impl MessageInput {
    pub fn new() -> MessageInput {
        MessageInput {
            message_type: None,
            text: None,
            intents: None,
            entities: None,
            suggestion_id: None,
            options: None,
        }
    }
}

/// The type of user input. Currently, only text input is supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageType {
    #[serde(rename = "text")]
    Text,
}

