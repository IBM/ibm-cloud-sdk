/*
 * Watson Assistant v2
 *
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.  The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MessageOutput : Assistant output to be rendered or processed by the client.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageOutput {
    /// Output intended for any channel. It is the responsibility of the client application to implement the supported response types.
    #[serde(rename = "generic", skip_serializing_if = "Option::is_none")]
    pub generic: Option<Vec<crate::models::RuntimeResponseGeneric>>,
    /// An array of intents recognized in the user input, sorted in descending order of confidence
    #[serde(rename = "intents", skip_serializing_if = "Option::is_none")]
    pub intents: Option<Vec<crate::models::RuntimeIntent>>,
    /// An array of entities identified in the user input
    #[serde(rename = "entities", skip_serializing_if = "Option::is_none")]
    pub entities: Option<Vec<crate::models::RuntimeEntity>>,
    /// An array of objects describing any actions requested by the dialog node.
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<crate::models::DialogNodeAction>>,
    #[serde(rename = "debug", skip_serializing_if = "Option::is_none")]
    pub debug: Option<Box<crate::models::MessageOutputDebug>>,
    /// An object containing any custom properties included in the response. This object includes any arbitrary properties defined in the dialog JSON editor as part of the dialog node output.
    #[serde(rename = "user_defined", skip_serializing_if = "Option::is_none")]
    pub user_defined: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "spelling", skip_serializing_if = "Option::is_none")]
    pub spelling: Option<Box<crate::models::MessageOutputSpelling>>,
}

impl MessageOutput {
    /// Assistant output to be rendered or processed by the client.
    pub fn new() -> MessageOutput {
        MessageOutput {
            generic: None,
            intents: None,
            entities: None,
            actions: None,
            debug: None,
            user_defined: None,
            spelling: None,
        }
    }
}


