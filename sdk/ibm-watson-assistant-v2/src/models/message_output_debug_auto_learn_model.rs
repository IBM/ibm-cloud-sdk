/*
 * Watson Assistant v2
 *
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.  The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MessageOutputDebugAutoLearnModel : Detailed information about how an autolearned model affected the response.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageOutputDebugAutoLearnModel {
    /// Whether the model was consulted successfully.
    #[serde(rename = "outcome", skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Outcome>,
    /// How the model was applied.
    #[serde(rename = "model_type", skip_serializing_if = "Option::is_none")]
    pub model_type: Option<ModelType>,
    /// Unique identifier of the autolearned model.
    #[serde(rename = "model_id", skip_serializing_if = "Option::is_none")]
    pub model_id: Option<String>,
    /// Possible responses the assistant would have returned with autolearning applied, either as disambiguation suggestions or alternate responses. Included only if the response was generated with autolearning in preview mode. (Preview mode means that autolearning is enabled, but is not being applied.)
    #[serde(rename = "suggestions", skip_serializing_if = "Option::is_none")]
    pub suggestions: Option<Vec<crate::models::DialogSuggestion>>,
}

impl MessageOutputDebugAutoLearnModel {
    /// Detailed information about how an autolearned model affected the response.
    pub fn new() -> MessageOutputDebugAutoLearnModel {
        MessageOutputDebugAutoLearnModel {
            outcome: None,
            model_type: None,
            model_id: None,
            suggestions: None,
        }
    }
}

/// Whether the model was consulted successfully.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Outcome {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failure")]
    Failure,
}
/// How the model was applied.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModelType {
    #[serde(rename = "autolearn")]
    Autolearn,
    #[serde(rename = "autolearn_explore")]
    AutolearnExplore,
    #[serde(rename = "supervised")]
    Supervised,
}

