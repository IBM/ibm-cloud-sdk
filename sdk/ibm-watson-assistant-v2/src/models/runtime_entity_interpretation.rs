/*
 * Watson Assistant v2
 *
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.  The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuntimeEntityInterpretation {
    /// The calendar used to represent a recognized date (for example, `Gregorian`).
    #[serde(rename = "calendar_type", skip_serializing_if = "Option::is_none")]
    pub calendar_type: Option<String>,
    /// A unique identifier used to associate a recognized time and date. If the user input contains a date and time that are mentioned together (for example, `Today at 5`, the same **datetime_link** value is returned for both the `@sys-date` and `@sys-time` entities).
    #[serde(rename = "datetime_link", skip_serializing_if = "Option::is_none")]
    pub datetime_link: Option<String>,
    /// A locale-specific holiday name (such as `thanksgiving` or `christmas`). This property is included when a `@sys-date` entity is recognized based on a holiday name in the user input.
    #[serde(rename = "festival", skip_serializing_if = "Option::is_none")]
    pub festival: Option<String>,
    /// The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.
    #[serde(rename = "granularity", skip_serializing_if = "Option::is_none")]
    pub granularity: Option<Granularity>,
    /// A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`).
    #[serde(rename = "range_link", skip_serializing_if = "Option::is_none")]
    pub range_link: Option<String>,
    /// The word in the user input that indicates that a `sys-date` or `sys-time` entity is part of an implied range where only one date or time is specified (for example, `since` or `until`).
    #[serde(rename = "range_modifier", skip_serializing_if = "Option::is_none")]
    pub range_modifier: Option<String>,
    /// A recognized mention of a relative day, represented numerically as an offset from the current date (for example, `-1` for `yesterday` or `10` for `in ten days`).
    #[serde(rename = "relative_day", skip_serializing_if = "Option::is_none")]
    pub relative_day: Option<f32>,
    /// A recognized mention of a relative month, represented numerically as an offset from the current month (for example, `1` for `next month` or `-3` for `three months ago`).
    #[serde(rename = "relative_month", skip_serializing_if = "Option::is_none")]
    pub relative_month: Option<f32>,
    /// A recognized mention of a relative week, represented numerically as an offset from the current week (for example, `2` for `in two weeks` or `-1` for `last week).
    #[serde(rename = "relative_week", skip_serializing_if = "Option::is_none")]
    pub relative_week: Option<f32>,
    /// A recognized mention of a relative date range for a weekend, represented numerically as an offset from the current weekend (for example, `0` for `this weekend` or `-1` for `last weekend`).
    #[serde(rename = "relative_weekend", skip_serializing_if = "Option::is_none")]
    pub relative_weekend: Option<f32>,
    /// A recognized mention of a relative year, represented numerically as an offset from the current year (for example, `1` for `next year` or `-5` for `five years ago`).
    #[serde(rename = "relative_year", skip_serializing_if = "Option::is_none")]
    pub relative_year: Option<f32>,
    /// A recognized mention of a specific date, represented numerically as the date within the month (for example, `30` for `June 30`.)
    #[serde(rename = "specific_day", skip_serializing_if = "Option::is_none")]
    pub specific_day: Option<f32>,
    /// A recognized mention of a specific day of the week as a lowercase string (for example, `monday`).
    #[serde(rename = "specific_day_of_week", skip_serializing_if = "Option::is_none")]
    pub specific_day_of_week: Option<String>,
    /// A recognized mention of a specific month, represented numerically (for example, `7` for `July`).
    #[serde(rename = "specific_month", skip_serializing_if = "Option::is_none")]
    pub specific_month: Option<f32>,
    /// A recognized mention of a specific quarter, represented numerically (for example, `3` for `the third quarter`).
    #[serde(rename = "specific_quarter", skip_serializing_if = "Option::is_none")]
    pub specific_quarter: Option<f32>,
    /// A recognized mention of a specific year (for example, `2016`).
    #[serde(rename = "specific_year", skip_serializing_if = "Option::is_none")]
    pub specific_year: Option<f32>,
    /// A recognized numeric value, represented as an integer or double.
    #[serde(rename = "numeric_value", skip_serializing_if = "Option::is_none")]
    pub numeric_value: Option<f32>,
    /// The type of numeric value recognized in the user input (`integer` or `rational`).
    #[serde(rename = "subtype", skip_serializing_if = "Option::is_none")]
    pub subtype: Option<String>,
    /// A recognized term for a time that was mentioned as a part of the day in the user's input (for example, `morning` or `afternoon`).
    #[serde(rename = "part_of_day", skip_serializing_if = "Option::is_none")]
    pub part_of_day: Option<String>,
    /// A recognized mention of a relative hour, represented numerically as an offset from the current hour (for example, `3` for `in three hours` or `-1` for `an hour ago`).
    #[serde(rename = "relative_hour", skip_serializing_if = "Option::is_none")]
    pub relative_hour: Option<f32>,
    /// A recognized mention of a relative time, represented numerically as an offset in minutes from the current time (for example, `5` for `in five minutes` or `-15` for `fifteen minutes ago`).
    #[serde(rename = "relative_minute", skip_serializing_if = "Option::is_none")]
    pub relative_minute: Option<f32>,
    /// A recognized mention of a relative time, represented numerically as an offset in seconds from the current time (for example, `10` for `in ten seconds` or `-30` for `thirty seconds ago`).
    #[serde(rename = "relative_second", skip_serializing_if = "Option::is_none")]
    pub relative_second: Option<f32>,
    /// A recognized specific hour mentioned as part of a time value (for example, `10` for `10:15 AM`.)
    #[serde(rename = "specific_hour", skip_serializing_if = "Option::is_none")]
    pub specific_hour: Option<f32>,
    /// A recognized specific minute mentioned as part of a time value (for example, `15` for `10:15 AM`.)
    #[serde(rename = "specific_minute", skip_serializing_if = "Option::is_none")]
    pub specific_minute: Option<f32>,
    /// A recognized specific second mentioned as part of a time value (for example, `30` for `10:15:30 AM`.)
    #[serde(rename = "specific_second", skip_serializing_if = "Option::is_none")]
    pub specific_second: Option<f32>,
    /// A recognized time zone mentioned as part of a time value (for example, `EST`).
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl RuntimeEntityInterpretation {
    pub fn new() -> RuntimeEntityInterpretation {
        RuntimeEntityInterpretation {
            calendar_type: None,
            datetime_link: None,
            festival: None,
            granularity: None,
            range_link: None,
            range_modifier: None,
            relative_day: None,
            relative_month: None,
            relative_week: None,
            relative_weekend: None,
            relative_year: None,
            specific_day: None,
            specific_day_of_week: None,
            specific_month: None,
            specific_quarter: None,
            specific_year: None,
            numeric_value: None,
            subtype: None,
            part_of_day: None,
            relative_hour: None,
            relative_minute: None,
            relative_second: None,
            specific_hour: None,
            specific_minute: None,
            specific_second: None,
            timezone: None,
        }
    }
}

/// The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Granularity {
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "fortnight")]
    Fortnight,
    #[serde(rename = "hour")]
    Hour,
    #[serde(rename = "instant")]
    Instant,
    #[serde(rename = "minute")]
    Minute,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "quarter")]
    Quarter,
    #[serde(rename = "second")]
    Second,
    #[serde(rename = "week")]
    Week,
    #[serde(rename = "weekend")]
    Weekend,
    #[serde(rename = "year")]
    Year,
}

